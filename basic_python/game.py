import re

"""exercise_2"""
# Пользователь1 вводит пять неповторяющихся чисел в диапазоне от 1 до 15 включительно.
# Пользователь2 пытается их угадать, у него есть 10 попыток.
# После каждой попытки программа должна выводить ответ, присутствует ли введенное Пользователем2 число среди загаданных.
# После исчерпания попыток программа должна вывести на экран (распечатать) загаданные числа,
# угаданные и неугаданные числа, а также ошибочные числа Пользователя2.
# При этом Пользователь1 может вводить числа тремя способами: через запятую, через пробел,
# через запятую и пробел (", "). Кроме того, должна быть проверка на то,
# действительно ли Пользователь1 ввел пять неповторяющихся чисел, или: 1. числа повторяются;
# 2. среди введенных чисел присутствуют числа вне допустимого диапазона (от 1 до 15);
# 3. введены не числа. При любом из этих вариантов должен быть осуществлен повторный запрос ввода загаданных чисел,
# с указанием на то, что было сделано не так. Запрос должен повторяться до тех пор,
# пока не будут введены загаданные числа, соответствующие всем требованиям, либо не будет введено слово "стоп"
# (в любом сочетании заглавных и строчных букв). - 4 балла


def is_number(string, x, y):
    try:
        # По условию задачи нужно отдельно прдупредить, если пользователь ввел букву
        if bool(re.findall(r'[a-яё]', string, re.I)):
            print('\n|                     ✘✘✘✘✘ В строке присутсвуют буквы  ✘✘✘✘✘                               \
      |')
            return False

        # создадим регулярное выражение, которое будет возвращать список из тех символов,
        # которые мы не должны иметь в строке
        # в строке мы можем иметь только пробел, цифры и запятую (и точку, если введены числа float)
        # оставим знак "-", чтобы потом выводить пользователю, что он ввел отрицательные числа
        elif bool(re.findall(r'[^ 0-9,.-]', string)):
            print('\n|     ✘✘✘✘✘ В строке присутствуют иные символы, кроме пробелов, запятой и цифр  ✘✘✘✘✘        \
      |')
            return False

        elif bool(re.findall(r',', string)):

            # если эта конструкция сломается, то значит пользователь ввел числа некорректно
            # например, одновременно через пробел и запятую
            # или числа с плавающей запятой были введены неправильно ("5 ." вместо "5.")
            str_split = [float(i) for i in string.split(',')]
            # необязательный пункт, но можно запариться для красоты
            str_split[:] = map(lambda x: int(x) if (x % 1 == 0) else float(x), str_split)

            if len(str_split) != 5 or bool([float(i) for i in str_split if not x <= float(i) <= y]):
                print('\n|                        ✘✘✘✘✘ Было введено меньше 5 чисел ✘✘✘✘✘                         \
      |'
                      if len(str_split) < 5
                      else ('\n|                   ✘✘✘✘✘ Было введено больше 5 чисел ✘✘✘✘✘                        \
      |'
                            if len(str_split) > 5 else ''))

                print(('',
                      '\n|                     ✘✘✘✘✘ Были введены числа вне диапазона [x, y] ✘✘✘✘✘               \
      |')
                      [bool([float(i) for i in str_split if not x <= float(i) <= y])])
                return False
            elif len(set([float(i) for i in str_split])) != len([float(i) for i in str_split]):
                print(f'|                   ✘✘✘✘✘ Были введены повторяющиеся числа ✘✘✘✘✘                         \
      |')
                return False

        else:

            # если эта конструкция сломается, то значит пользователь ввел числа некорректно
            # например, числа с плавающей запятой были введены неправильно ("5 . 9" вместо "5.9")
            str_split = [float(i) for i in string.split()]
            # необязательный пункт, но можно запариться для красоты
            str_split[:] = map(lambda x: int(x) if (x % 1 == 0) else float(x), str_split)

            if len(str_split) != 5 or bool([float(i) for i in str_split if not x <= float(i) <= y]):
                print('\n|                        ✘✘✘✘✘ Было введено меньше 5 чисел ✘✘✘✘✘                         \
        |'
                      if len(str_split) < 5
                      else ('\n|                        ✘✘✘✘✘ Было введено больше 5 чисел ✘✘✘✘✘                   \
        |'
                            if len(str_split) > 5 else ''))
                print(('',
                      '\n|           ✘✘✘✘✘ Были введены числа вне диапазона [x, y] ✘✘✘✘✘                         \
        |')
                      [bool([float(i) for i in str_split if not x <= float(i) <= y])])
                return False
            elif len(set([float(i) for i in str_split])) != len([float(i) for i in str_split]):
                print(f'\n|           ✘✘✘✘✘ Были введены повторяющиеся числа ✘✘✘✘✘                                   \
        |')
                return False

    except ValueError:
        print(f'\n** Возможно, Вы попытались ввести числа одновременно через пробел и запятую. **\
                \n** Или были неправильно введены дробные числа. **')
        return False
    return True, str_split

# Так как условие задачи просит нас быть доброжелательным к пользователям,
# то напишем небольшую функцию доброты для user1 и user2.


def kindness_to_user1(string):
    try:
        # Предупредим пользователя2 о том, что он ввел буквы
        if bool(re.findall(r'[a-яё]', string, re.I)):
            print('\n              ✘✘✘✘✘   В строке присутствуют буквы    ✘✘✘✘✘             ')
            return False

        # создадим регулярное выражение, которое будет возвращать список из тех символов,
        # которые мы не должны иметь в строке
        # в строке от пользователя2 мы должны иметь только цифры и точку для дробей(РАЗРЕШИМ ЕЩЕ ПРОБЕЛЫ!!!)
        # и минус для отрицательных значений
        elif bool(re.findall(r'[^ 0-9-.]', string)):
            print('\n        ✘✘✘✘✘ В строке присутствуют иные символы, кроме цифр     ✘✘✘✘✘    ')
            return False

        # Эта конструкция отбросит любые неправильно введеные пользователем значения
        # кроме пробелов '5     ' - будет правильным
        # мы же все таки доброжелательны к пользователям
        # Если пробелы нужно тоже убрать, то только в регулярном выражении достаточно их убрать
        string = float(string)
        string = int(string) if (string % 1 == 0) else float(string)

    except ValueError:
        return False
    return True, string


def kindness_to_user2(string, x, y):
    try:
        # Предупредим пользователя2 о том, что он ввел буквы
        if bool(re.findall(r'[a-яё]', string, re.I)):
            print('\n          ✘✘✘✘✘    В строке присутствуют буквы     ✘✘✘✘✘          ')
            return False

        # создадим регулярное выражение, которое будет возвращать список из тех символов,
        # которые мы не должны иметь в строке
        # в строке от пользователя2 мы должны иметь только цифры, точку для дробей(РАЗРЕШИМ ЕЩЕ ПРОБЕЛЫ!!!) и "-"
        elif bool(re.findall(r'[^ 0-9-.]', string)):
            print('\n      ✘✘✘✘✘    В строке присутствуют иные символы, кроме цифр     ✘✘✘✘✘      ')
            return False

        # Предупреждение для пользователя2, если он ввел число вне диапазона
        # По условию числа могут быть float
        elif not x <= float(string) <= y:
            print('\n           ✘✘✘✘✘  Были введены числа вне диапазона     ✘✘✘✘✘       ')
            return False

        # Эта конструкция отбросит любые неправильно введеные пользователем значения
        # кроме пробелов '5     '  - будет правильным
        # мы же все таки доброжелательны к пользователям
        # Если пробелы нужно тоже убрать, то только в регулярном выражении достаточно их убрать
        string = float(string)
        string = int(string) if (string % 1 == 0) else float(string)

    except ValueError:
        return False
    return True, string


def finish(name_user1, stop_word):
    print(f'                       💥  Игрок {name_user1} ввел слово {stop_word}  💥                         \
               \n                        👾👾👾   Game over   👾👾👾                                           \
               \n       ⭐  ⭐  ⭐  ⭐  ⭐  ⭐  ⭐  ⭐  ⭐  ⭐  ⭐  ⭐  ⭐  ⭐  ⭐  ⭐  ⭐  ⭐  ⭐  ⭐      ')

    while True:
        # если да, то вернет в начало цикла
        continue_input = input('Хотите продолжить игру? (Ответ: да, нет): ')
        if 'да' == continue_input.lower():
            return continue_input
        elif 'нет' != continue_input.lower():
            print(f'Ваш ввод оказался некорректным. Вы ответили {continue_input}.\
                      \nПожалуйста, ответьте "да" или "нет"')
            continue
        else:
            return continue_input


# --------------------------------------------------------------------------------------------------------------------
# Ограничения на то, какой тип чисел - нет. Это может быть int или float
# '4, 8  9, 4' - если пользователь1 будет вводить числа и через пробел и через запятую, то такое будет отсекаться

# проверка на то, ввел ли пользователь1 все правильно
# у пользователя1 неограниченное количество попыток раз вводить загаданные числа


print(f' _________________________________________________________________________________________________|\
       \n| ☀☀☀  Пользователь1 загадывает пять уникальных неповторяющихся чисел в диапазоне [x, y]  ☀☀☀     |\
       \n|❗ Загадывать числа можно только одним из трех возможных способов: ❗                              |\
       \n|     1)через запятую                                                                             |\
       \n|     2) через пробел                                                                             |\
       \n|     3) через запятую и пробел (", ")                                                            |\
       \n|~~~~~~~ После этого у Пользователя2 будет 10 попыток, чтобы отгадать эти загаданные числа ~~~~~~~|\
       \n|                                                                                                 |\
       \n|        •  •  •    Чтобы выйти из игры, введите слово "стоп" любом регистре    •  •  •           |\
       \n|_________________________________________________________________________________________________|')

try_game = 0
# Нечетную игру ведет пользователь1, четную - пользователь2
correct_user1 = 0
correct_user2 = 0

# для того, чтобы user2 смог выйти из игры
answer_user2 = ''

# для того, чтобы игроки смогли выйти из игры
continue_input = ''

# для того, чтобы user1 мог выйти из игры
user1 = []
user2_input = ''
# На имя ограничений нет. Пусть пользователи называют себя как хотят
name_user1 = input('Пожалуйста, введите имя 1-го пользователя: ').title()
name_user2 = input('Пожалуйста, введите имя 2-го пользователя: ').title()

stop_word = 'стоп'

while True:

    if continue_input == 'нет':
        break

    if user2_input.lower() == 'нет':
        continue_input = finish(name_user2, stop_word)
        if continue_input == 'нет':
            break

    elif user2_input.lower() == stop_word:
        continue_input = finish(name_user2, stop_word)
        if continue_input == 'нет':
            break

    a = 1
    try_game += 1
    # Счетчики надо в начале игры обнулять
    counter = 0
    correct, wrong, attempts = 0, 0, 10
    user2_input = ''
    str_input = ""
    # для input`а пользователем2, его нужно каждый раз обновлять,
    # иначе user2 не сможет вводить числа из предыдущей игры
    user2 = ''

    # Создаем список, чтобы предупредить пользователя, что он уже вводил это число
    # и чтобы его за это не штрафовать :). Его нужно каждый раз обновлять, иначе пользователь не сможет вводить
    # прошлый числа
    attempts_user2 = []

    # Запрашиваем имена лишь один раз, далее мы их автоматически меняем
    # корректные ответы тоже нужно менять местами
    if try_game != 1:
        name_user1, name_user2 = name_user2, name_user1
        correct_user1, correct_user2 = correct_user2, correct_user1
        print(f' _🍃_🍃_🍃_🍃_🍃_🍃_🍃_🍃_🍃_🍃_🍃_Игроки меняются местами_🍃_🍃_🍃_🍃_🍃_🍃_🍃_🍃_🍃_🍃_🍃_')

    print(f'|____________________________________________________________________________________________|\
            \n|                                   Игра началась                                              \
            \n| ----------------------------------Раунд №{try_game}-------------------------------------------------|\
            \n| Пользователю {name_user1} необходимо ввести диапазон, в котором он хочет загадывать числа [x, y] ')

    while True:
        if continue_input == 'нет':
            break
        # к счастью у нас есть функция доброты, чтобы перепроверить пользователя1
        x = input('Пожалуйста введите начало диапазона одним число (x): ')
        y = input('Пожалуйста введите конец диапазона одним числом (y): ')
        if kindness_to_user1(x) and kindness_to_user1(y) and float(x) < float(y):
            x = kindness_to_user1(x)[1]
            y = kindness_to_user1(y)[1]
            break
        else:
            print(f'Ваш ввод диапазона оказался некорректным. Вы ввели диапазон [{x}, {y}].\
                  \nПожалуйста, повторите ввод.\
                  \n|--------------------------------------------------------------------------------------------|')
            continue

    print(f'\n|--------------------------------------------------------------------------------------------|\
           \n|       Попытка пользователя {name_user1} правильно ввести загаданные числа №{a}               \
           \n|--------------------------------------------------------------------------------------------|')

    while True:
        # принимать значения лучше всего в строку
        str_input = input(f'              »»» 👾 please enter 5 numbers separated by space or comma: ')
        print('|______________________________________________________________________________________________|')

        # по условию, игру можно остановить русским словом "стоп", которое не чувствительно к регистру
        if stop_word in str_input.lower():
            continue_input = finish(name_user1, stop_word)
            break
        # проверяем строку на наличие только чисел через пробел или запятую
        elif is_number(str_input, x, y):
            user1 = is_number(str_input, x, y)[1]
            print('~ ' * 48)
            print(f'{name_user1} корректно загадал 5 чисел в диапазоне [{x}, {y}].\
                   \nТеперь очередь {name_user2} угадывать загаданные числа.\
                   \n{name_user2} должен ответить готов он или нет. Ответ "да" или "нет" в любом регистре.')
            print('~ ' * 48)
            break

        else:
            a += 1
            print(f' ________________________________________________________________________________________________\
                    \n|                              -- error, please try again --                                   |\
                    \n|Пожалуйста, загадайте 5 чисел в диапазоне [{x}, {y}] только одним из трех возможных способов: |\
                    \n|    1) через запятую                                                                          |\
                    \n|    2) через пробел                                                                           |\
                    \n|    3) через запятую и пробел (", ")                                                          |\
                    \n|                                                                                              |\
                    \n|            •  •  • Чтобы выйти из игры, введите слово "стоп" любом регистре •  •  •          |\
                    \n|_____________________________________________________________________________________________|\
                    \n|----------------------------------------------------------------------------------------------|\
                    \n|                 Попытка {name_user1} правильно ввести загаданные числа №{a}                   \
                    \n|----------------------------------------------------------------------------------------------|')

    if user1:
        if stop_word in str_input.lower():
            break
        if continue_input == 'нет':
            break
        print(f'|▷-▷-▷-▷-▷-▷-▷-▷-▷-▷-▷-▷-▷-▷-▷-▷-▷-▷-▷-▷-▷-▷-▷-▷-▷-▷-▷-▷-▷-▷-▷-▷-▷-▷-▷-▷-▷-▷-▷-▷-▷-▷-▷-▷-▷-▷-▷-▷|\
              \n|             Пришла очередь игрока {name_user2} угадывать числа игрока {name_user1}\
              \n|▷-▷-▷-▷-▷-▷-▷-▷-▷-▷-▷-▷-▷-▷-▷-▷-▷-▷-▷-▷-▷-▷-▷-▷-▷-▷-▷-▷-▷-▷-▷-▷-▷-▷-▷-▷-▷-▷-▷-▷-▷-▷-▷-▷-▷-▷-▷-▷|')

        while True:

            if bool(user2_input) or correct == 5:
                break

            answer_user2 = input(f'{name_user2}, Вы готовы угадывать числа? (Ответ: да, нет): ')
            if 'нет' == answer_user2.lower():
                print(f'\n** Ответ {name_user2}: {answer_user2}. ** \n** Game over **')
                answer_user2 = 'default'
                break
            elif 'да' != answer_user2.lower():
                print(f'Ваш ввод оказался некорректным. Вы ввели: "{answer_user2}".\
                       \nПожалуйста, введите только "да" или "нет"  в любом регистре без посторонних символов')
                continue
            elif 'да' == answer_user2.lower():

                print(f'-🍀-🍀-🍀-🍀-🍀-🍀-🍀-🍀-🍀-🍀-🍀- Игра началась -🍀-🍀-🍀-🍀-🍀-🍀-🍀-🍀-🍀-🍀-🍀-🍀-🍀-\
                       \n-⑩-⑩-⑩-⑩-⑩-⑩-⑩-⑩-⑩-⑩-⑩- У игрока {name_user2} 10 попыток -⑩-⑩-⑩-⑩-⑩-⑩-⑩-⑩-⑩-⑩-⑩-⑩-⑩-\
                       \nПользователю {name_user2} нужно вводить одно число:                     \
                       \n\t1) в диапазоне [{x}, {y}]                                                                   \
                       \n\t2) без пробелов, без запятых и других символов')

                # Надо остановить цикл, когда user2 исчерпает 10 попыток или когда угадает все числа
                while counter < attempts:
                    if correct == 5:
                        break

                    user2_input = input(f'Попробуйте угадать одно число из 5 чисел в диапазоне [{x}, {y}]: ')
                    # По условию задачи можно не делать проверку на то, что Пользователь2 ввел число в нужном дапазоне
                    # Нужно лишь сделать проверку на то, что Пользователь2 ввел одно число
                    # Пользователь2 ИТАК ЗНАЕТ, ЧТО ПОЛЬЗОВАТЕЛЬ1 ЗАГАДАЛ 5 ЧИСЕЛ В ДАПАЗОНЕ [1, 15]
                    # по условию, игру можно остановить русским словом "стоп", которое не чувствительно к регистру
                    if stop_word == user2_input.lower():
                        print(f'** {name_user2} ввел слово {user2_input}. **\
                               \n** Game over **')
                        break

                    if kindness_to_user2(user2_input, x, y):

                        user2 = kindness_to_user2(user2_input, x, y)[1]

                        if user2 in user1:
                            if user2 in attempts_user2:
                                print('Это число верное и Вы его уже вводили')
                            # По условию задачи правильно введеный ответ по сути не считается за попытку
                            # Счетчик попыток будет крутиться только при неправильном вводе
                            # то есть количетсво попыток НЕ РАВНО количеству введенных пользователем2 чисел
                            elif user2 not in attempts_user2:
                                correct += 1
                                print('Верно!')

                        else:
                            if user2 in attempts_user2:
                                print('Это число неверное и Вы его уже вводили. Штрафовать не будем :)')
                            else:
                                counter += 1
                                wrong += 1
                                print(f'Неверно! Осталось попыток: {attempts - counter}')

                    # Если ввод оказался некорректным, то предупреждаем пользователя и НЕ штрафуем его
                    else:
                        print(f' ____________________________________________________________________________________\
                               \n|--------------Ваш ввод оказался некорректным! Штрафовать не будем :)---------------|\
                               \n|----------------------В следующий раз будьте аккуратнее ;)-------------------------|\
                               \n|                                                                                   |\
                               \n|               • • • • •     Инструкция для игрока {name_user2}     • • • • •       \
                               \n|                                                                                   |\
                               \n| ~  Чтобы угадать числа, от пользователя {name_user1}, используйте  инструкцию:  ~ \
                               \n|       1) Вводить нужно только одно число без посторонних символов                 |\
                               \n|       2) Число должно быть в диапазоне [{x}, {y}]                                 \
                               \n|       3) Для выхода из игры введите "стоп" в любом регистре                       |\
                               \n|___________________________________________________________________________________|')

                    # Так как мы договорились пользователя не штрафовать за повторно введеные
                    # правильные\неправильные числа,
                    # то в конченом списке его вариантов ответа должны быть только уникальные числа
                    # можно в конце применить set ко всему списку его введеных чисел
                    attempts_user2.append(user2)
                    attempts_user2 = list(set(attempts_user2))

                else:
                    print(f'Попытки исчерпаны!')
            # в нечетной игре (1, 3, 5..) угадывает user2, в четной - user1
            correct_user2 += correct if try_game % 2 != 0 else 0
            correct_user1 += correct if try_game % 2 == 0 else 0

            print(f'_★_★_★_★_★_★_★_★_★_★_★_★_★_★_★_★_★_★_★_★_★_★_★_★_★_★_★_★_★_★_★_★_★_★_★_★_★_★_★_★_★_★_\
            \n                                        Конец {try_game} игры                                           \
            \n                                Количество правильных ответов: {correct}                                \
            \n                                      Число ошибок: {wrong}                                             ')
            print(f'Числа, которые загадал {name_user1}: ', ', '.join([str(i) for i in user1]))
            print(f'Числа, которые ввел {name_user2}: ', ', '.join([str(i) for i in attempts_user2]))
            print(f'Числа, которые отгадал {name_user2}: ', ', '.join([str(i) for i in attempts_user2 if i in user1]))
            print(f'_★_★_★_★_★_★_★_★_★_★_★_★_★_★_★_★_★_★_★_★_★_★_★_★_★_★_★_★_★_★_★_★_★_★_★_★_★_★_★_★_★_★_')

else:
    finish(user2_input, stop_word)

# Выводим таблицу с помощью f-строк
print(f'| ☁ ☁ ☁ ☁ ☁ ☁ ☁ ☁ ☁ ☁ ☁ ☁ ☁ ☁ ☁ ☁  Результат игры  ☁ ☁ ☁ ☁ ☁ ☁ ☁ ☁ ☁ ☁ ☁ ☁ ☁ ☁ ☁ ☁ |\
      \n|  ---------------- Количество сыгранных партий: {try_game} ------------------------------  |\
      \n|           ✓ ✓ ✓ ✓ ✓ ✓ ✓ ✓   Количество верных ответов   ✓ ✓ ✓ ✓ ✓ ✓ ✓ ✓          |\
      \n|{name_user1}: {correct_user1} {("", "🏆")[correct_user1 > correct_user2]}\
      \n|{name_user2}: {correct_user2} {("", "🏆")[correct_user2 > correct_user1]}\
      \n| ☁ ☁ ☁ ☁ ☁ ☁ ☁ ☁ ☁ ☁ ☁ ☁ ☁ ☁ ☁ ☁ ☁ ☁ ☁ ☁ ☁ ☁ ☁ ☁ ☁ ☁ ☁ ☁ ☁ ☁ ☁ ☁ ☁ ☁ ☁ ☁ ☁ ☁ ☁ |')
print(f'\n|                        Побеждает игрок ✌ {name_user1} ✌' if correct_user1 > correct_user2
      else (f'                        Побеждает игрок ✌ {name_user2} ✌' if correct_user2 > correct_user1
            else '                                 ✌ Ничья ✌'))
print('\n| ☁ ☁ ☁ ☁ ☁ ☁ ☁ ☁ ☁ ☁ ☁ ☁ ☁ ☁ ☁ ☁ ☁ ☁ ☁ ☁ ☁ ☁ ☁ ☁ ☁ ☁ ☁ ☁ ☁ ☁ ☁ ☁ ☁ ☁ ☁ ☁ ☁ ☁ ☁ |')


"""exercise_3"""

# Дополнительное задание: 3 балла
# добавить возможность варьирования границ диапазона (учесть граничные случаи и возможные ошибки);
# необходимо после запуска программы сначала выводить условия игры;
# после того, как выведен результат игры, спрашивать, повторить ли игру, и если пользователь ответил "да"
# (в любых вариациях - о чем написать), запускать игру заново (в том числе заново распечатывать задания).

# -----сделано-----


"""exercise_4"""
# Дополнительное задание 2: 3 балла
# Спрашивать имена пользователей - единожды в начале сессии игр;
# чередовать роли пользователей в пределах одной сессии игр - пока пользователи не откажутся продолжать игры - сначала
# Пользователь1 загадывает, Пользователь2 угадывает, в следующей итерации - наоборот;
# сохранять результаты игр (какое число раз Пользователь1 угадал все числа, загаданные Пользователем 2, и наоборот;
# после окончания сессии игр вывести таблицу результатов (с именами пользователей).

# -----сделано-----